[00:00:00]
>> Bianca Gandolfo: We are doing reduce. Can someone tell me from the documentation what does this take? It take a list, and it takes a callback and then an initial value, right?
>> Speaker 2: Mm-hm.
>> Bianca Gandolfo: Okay, so,
>> Bianca Gandolfo: All right, we'll skip the underscore part. Okay, so the first thing we need to do is, we wanna loop through the list, right?

[00:00:37]
For every loop, what do we need to do?
>> Speaker 3: Need to hold its value.
>> Bianca Gandolfo: We need to save the return value of what?
>> Speaker 3: Of the callback.
>> Bianca Gandolfo: So we call the callback with?
>> Speaker 4: The value of the array at the index.
>> Bianca Gandolfo: Yep, with the, I'll just say arr[i], we know what that means now.

[00:01:06]
And what else?
>> Speaker 4: You combine them.
>> Bianca Gandolfo: In the previous value, right?
>> Speaker 4: Yeah, in the previous value with the initial.
>> Bianca Gandolfo: Yeah, or initial, depending, great. And then once we do that, we wanna save that value for the next loop. And then what?
>> Speaker 4: We return the total, or whatever it is that we get at the end.

[00:01:37]

>> Bianca Gandolfo: Yeah, return the results, which will be one value, right? That's why it's reduced. It takes a list, and it reduces it down to one thing. All right, so let's try this. So let's loop through a list. Let's just pretend that it's gonna be a,
>> Bianca Gandolfo: It's gonna be an array always, and then while list, while i is less than list.length.

[00:02:16]
Come on, list.length. Wow, okay, i++, all right, so we wanna call a callback. I'm gonna say callback, we're calling it, we wanna pass some arguments. We have our list[i], and then some previous value or something, right? This is not returning. This isn't,
>> Bianca Gandolfo: Referencing anything yet, it's just a holding variable for now.

[00:02:59]
Or you could call this memo or accumulator value. Okay,
>> Bianca Gandolfo: And then we need to save that value somewhere, probably not in loop cuz it would be reinitialized, and that would be against our whole thing. So let's say we want-
>> Speaker 4: Let memo = initial.
>> Bianca Gandolfo: Okay.
>> Bianca Gandolfo: We can also get initial, hm, can we do this?

[00:03:48]

>> Bianca Gandolfo: Anyone know?
>> Bianca Gandolfo: It's like referencing itself.
>> Bianca Gandolfo: I don't know.
>> Bianca Gandolfo: We'll just leave it there for now and see what happens. It's an adventure. So we say memo = call back with these applied, and then at the end, you wanna return memo, something like that. What do we think so far?

[00:04:22]

>> Bianca Gandolfo: What do you think, maybe? Let's run it as a team.
>> Bianca Gandolfo: Then we're gonna have our functions, we're gonna take the value and then sum.
>> Bianca Gandolfo: All right.
>> Bianca Gandolfo: Okay,
>> Bianca Gandolfo: You guys ready to run it in your minds? Who wants to go first?
>> Bianca Gandolfo: How about,

[00:05:22]

>> Bianca Gandolfo: Jenny?
>> Jenny: Start at the first line?
>> Bianca Gandolfo: Yep, we'll start with the first line.
>> Jenny: [COUGH] Setting the variable to reduce.
>> Bianca Gandolfo: Yep, so we just set up our function definition to reduce. And then what happens, Josh?
>> Josh: We call reduce with those parameters.
>> Bianca Gandolfo: Yeah, we call reduce, we pass it a list.

[00:05:45]
We pass it a function. So now, list is gonna be 1, 2, 3,
>> Bianca Gandolfo: And our callback is gonna be sum sum, just for reference here, okay? So, I don't know if this works. But either this or,
>> Bianca Gandolfo: Is how we can do it, all right, either way.

[00:06:16]
So memo equals initial or the first of our list, and so we want that to be 1.
>> Bianca Gandolfo: So in that case, we wanna start a little later, right? We wanna skip the first one.
>> Bianca Gandolfo: Hm, actually that's something we need to say. What should we do there?

[00:06:39]
Something to consider is what happens when.
>> Bianca Gandolfo: Let's say, I think what we wanna do, what happens when the first value becomes the initial value? We should account for that, we're not accounting for that in this scenario. But we'll get back to that, what right here. So we'll start at 0, let's pass an initial.

[00:07:12]

>> Bianca Gandolfo: So in the case where we have an initial value, this is 0.
>> Bianca Gandolfo: list[1] is what?
>> Speaker 7: 0.
>> Bianca Gandolfo: 1, yeah, so we pass 1, and then memo is what? You're right. No, wait, no, list[i] is 1. And then memo is gonna be 0, okay? So we have 1 and then 0.

[00:07:41]
We're gonna go into our function. v is 1, sum is 0. That is gonna return 1, so memo is now 1. Great, so now let's loop again, we'll reset this value. So i is now 1. List at 1 is 2. And then memo is gonna be 1. And we do the same.

[00:08:11]
Now memo is gonna be 3.
>> Bianca Gandolfo: And we wanna loop again. i is now 2. Second index is 3. That is going to give us 3 and 3. Add those together, it's gonna give us 6.
>> Bianca Gandolfo: We break out of this, and we return 6.
>> Bianca Gandolfo: Seems good for a first pass.

[00:08:59]

>> Bianca Gandolfo: Any bugs?
>> Speaker 4: The theorem thing.
>> Bianca Gandolfo: Yeah, so what do we do when we don't have an initial value?
>> Bianca Gandolfo: Because if we just reset it, then we'd be adding 1 +1, and then our value would be 7. You know what I mean? So that's probably not what we wanna do.

[00:09:26]

>> Bianca Gandolfo: So, we can just say something like if initial then. Let's just do this if (initial), then memo = initial else memo = [SOUND] I think we should do it actually in.
>> Bianca Gandolfo: Think we should do it in here. if (i === 0 && !initial) is not defined, then memo = List at i.

[00:10:28]

>> Bianca Gandolfo: List at 0.
>> Bianca Gandolfo: And then we're gonna increment i.
>> Bianca Gandolfo: Like that. How's that gonna turn out? If i is 0, and it's not, there's no initial value.
>> Bianca Gandolfo: Whoa.
>> Bianca Gandolfo: Okay.
>> Bianca Gandolfo: Looks a little messy. I think there can be a more elegant solution here.
>> Speaker 8: Memo be undefined if there's a initial.

[00:11:10]

>> Bianca Gandolfo: Yeah.
>> Speaker 8: So and not undefined.
>> Bianca Gandolfo: And, like that?
>> Speaker 8: No, no I mean it's already.
>> Bianca Gandolfo: So if this is true.
>> Speaker 8: Yeah.
>> Bianca Gandolfo: So n not, yeah, yeah that's right.
>> Speaker 8: Not undefined.
>> Bianca Gandolfo: Yeah, you're right and is undefined.
>> Speaker 8: Awesome, that's double negation, right?

[00:11:39]

>> Bianca Gandolfo: Yeah.
>> Bianca Gandolfo: [INAUDIBLE] Let's see. Not true is false.
>> Speaker 3: You can just remove the two double negation entirely for the same thing, couldn't you.
>> Bianca Gandolfo: What do you mean?
>> Speaker 3: Well, isn't memo = double negated memo?
>> Bianca Gandolfo: Yeah.
>> Josh: Do you find this false?
>> Bianca Gandolfo: No, but we want this to be true, because of the int.

[00:12:16]
So these both need to be true for it to enter into this block.
>> Bianca Gandolfo: Actually, I have a better idea. I like this better.
>> Bianca Gandolfo: Okay, I'm happier with that.
>> Bianca Gandolfo: Okay.
>> Bianca Gandolfo: What do we think?
>> Bianca Gandolfo: It seem reasonable? Probably, we wanna pass more things into the callback.

[00:12:55]

>> Josh: The original list?
>> Bianca Gandolfo: Yeah and that kind of thing, but this is the basic functionality.
>> Bianca Gandolfo: Any questions?
>> Bianca Gandolfo: Any bugs? I can't believe I did that without any bugs, except for the one that we knew about.
>> Bianca Gandolfo: So I'm gonna trace it like we did before.

[00:13:29]

>> Bianca Gandolfo: Or actually, how about you guys trace it since my uvula is swollen. [LAUGH] All right, wait, did you guys trace it before? I feel like I'm going crazy. You guys already traced it, right? Okay, well maybe I'll do it this time. Okay, so we have a reduce function.

[00:13:53]
We're calling it with two arguments, or three arguments, really. We have an array. And we have a function, and this function just returns the sum of two numbers.
>> Bianca Gandolfo: And then an initial value. So what we wanna do, is for every value in this list, we wanna run this function on it.

[00:14:22]
And we expect it to return one value. That value gets passed into the function as a second argument, and then the next value gets passed as the first. So we have the value and then we have the sum, that will get passed every single time. In this case, it'll be three times that we go through.

[00:14:44]
And this is our initial value. This tells us what we start with. If we don't have an initial value, we use the very first value in the array.
>> Bianca Gandolfo: But we'll have an initial value. It's a little bit easier to conceptualize that way. And then we will do it without initial value and see how that works.

[00:15:02]
So we called it, so list is that array one two three. We have this call back function. A summation function, and then initial is zero. So we start of memo, memo is initial. So that is gonna be 0, i = 0, and uh-oh, there's a bug. You guys see that bug?

[00:15:29]
If memo is 0?
>> [INAUDIBLE]
>> Josh: It's 0.
>> Bianca Gandolfo: Yeah.
>> Bianca Gandolfo: JavaScript. Okay. So i zero, that's true. Memo is not undefined, because it's 0. So we skip that, we jump into this else block. We're gonna call this call back function with memo, which is 0. List at i.

[00:16:00]
Which is one. So we're gonna call it with one and zero. Those are arguments, just so we have it to look at. And here's a summation function. I can also write this longer hand if it's easier but we just need to add one and zero together. And that's gonna return one.

[00:16:21]
So memo is now updated to one, okay? And we're gonna go now to the next loop. So i
>> Bianca Gandolfo: i = 1 at this point. i is not 0, so we never even go into the left side. Since this is false, we'll just skip it entirely, go back and then move it back in this else block.

[00:16:45]
List is what? list(i) is 2, yeah. We're following? We're going too fast? Okay. And then memo is 1. Okay, we add them together, that gives us 3. And we update memo is now 3. Now we're gonna restart the loop, i is now 2 and this is false, we're gonna run this.

[00:17:20]
List at i
>> Bianca Gandolfo: Is 3, memo is 3, and so now we have 6 and we update memo with 6.
>> Bianca Gandolfo: And we're gonna try to do the loop again but it's gonna fail. Because 3 is not less than 3. Right? If we did that, it would still run but we don't wanna do that.

[00:17:50]

>> Bianca Gandolfo: And since we went all through that and we'll return memo which will return 6 down here. Okay? Any questions about that?
>> Bianca Gandolfo: No?
>> Bianca Gandolfo: It's surprisingly simple for something so complicated. You know what I mean? All right, so now let's try it without the initial value.
>> Bianca Gandolfo: Okay, I'll just switch it up a little bit.

[00:18:26]
So here's our lists, 2, 3, 5. This is gonna be set to undefined. Because we haven't passed anything to initial, right? So we need to put it there. We're gonna start i at 0. So i is 0. i is 0 and memo is undefined, so then we assign memo to list at 0 which is 2.

[00:19:00]

>> Bianca Gandolfo: Then we loop again, now i is 1.
>> Bianca Gandolfo: And then we skip this, we go here. We're calling our call back with our list at i which is, what was it again? 3 + memo which is 2. Okay? Thumbs on where, you following? Okay, so then we assign memo, we update that to 5.

[00:19:40]

>> Bianca Gandolfo: Okay? Now i is 2. We skip this one, we go here and we want to do 5, right? i list at 2 is 5 + 5 = 11.
>> Bianca Gandolfo: = 11. 5 + 5 = 11.
>> Speaker 9: What?
>> Bianca Gandolfo: 5 + 5 = 11. Not true, 10. I was just seeing if you guys are paying attention.

[00:20:19]
And you weren't, caught you, so we're done with this loop cuz 3 is not less than 3. And then we return 10.
>> Bianca Gandolfo: Any questions?
>> Bianca Gandolfo: No?
>> Bianca Gandolfo: Go away. So that is reduce.
>> Bianca Gandolfo: Did anyone get it running on their own?
>> Speaker 8: Yeah.
>> Bianca Gandolfo: You just got it to go?

[00:21:02]
Nice.
>> Speaker 8: I didn't in that initial condition though so it was kind of good.
>> Bianca Gandolfo: Yeah, that's okay. All right.

