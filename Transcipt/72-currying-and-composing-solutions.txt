[00:00:00]
>> Bianca Gandolfo: So here's our little reference for how this works. So let's create a function called curry. Const curry = some function. It takes a string.
>> Bianca Gandolfo: Well, let's save it like this for now. Takes a function, that's what it takes, snd then,
>> Bianca Gandolfo: We need to get it to work with this behavior but with just two of them, we don't need to do this.

[00:00:49]

>> Bianca Gandolfo: Okay, just because for this exercise I wanted to simplify it. For everyone's,
>> Bianca Gandolfo: Benefit really. Okay, so we have a function.
>> Bianca Gandolfo: And we need to return,
>> Bianca Gandolfo: We need to return a function. We know that, right?
>> Bianca Gandolfo: Okay.
>> Bianca Gandolfo: So when we call it return a function.

[00:01:22]
When we call it a second time, we wanna save that value. So we are going to need to be able to take an argument there, for the first one.
>> Bianca Gandolfo: And then we are gonna return another function, we need to have a second argument,
>> Bianca Gandolfo: There and then once we get to that second argument, then we can call our function with both of those arguments.

[00:02:01]

>> Bianca Gandolfo: arg2, we probably want to return it. Alright, so shall we run this? So the first thing that we do is we run curry with our function name, okay. So function name is ABC and we return this function. So curried now holds the value of this function body here.

[00:02:37]
When we call it, well when we can, so function is ABC and then arg is going to be one.
>> Bianca Gandolfo: And then we return this function.
>> Bianca Gandolfo: We call it again. We can do that, because it returns a function, right? Remember when we tried it before, and it didn't work because it returned undefined?

[00:03:00]
Now it works because we are actually returning a function and we can do this little bit where we do it twice in a row.
>> Bianca Gandolfo: And then we pass 2,
>> Bianca Gandolfo: And because of scope, we retain access to fn, arg, and of course arg2, and so, we're two levels deep.

[00:03:23]
We're calling our function with arg and arg2 and returning that value.
>> Bianca Gandolfo: And that's the basis of implementing a curry function. Obviously, it gets a little bit more complicated when you have varying numbers of inputs, right? Longer arguments, right? For this one, we're just assuming there's two. But if you can imagine, if you don't know how many there are, there's some looping involved, probably some recursion, to get that to work.

[00:03:59]
But that's the basic value. So we're just returning nested functions.
>> Bianca Gandolfo: Cool, any questions about this?
>> Bianca Gandolfo: No, okay and the next one is compose.
>> Bianca Gandolfo: Let's get out our little example. Just so we have something to run.
>> Bianca Gandolfo: Okay, get our word wrap, perfect. So we have our compose function and for this case we are going to do two as well.

[00:04:46]
So we are going to say const compose equals function and it is going to take two arguments. OK, and the first thing that needs to happen is that we need to return a function, so that we can call it later. So let's set that up. Let's return a function here and, it needs to be able to take some arguments here.

[00:05:34]

>> Bianca Gandolfo: Let's just say it'll take one for now. And then we wanna first call exclaim. So that's the second one, so we're going to call, let's call this function 1 and function 2. So let's call function 2, with our arg, and we're going to return that to a result.

[00:06:04]

>> Bianca Gandolfo: And then we are going to be able to pass that result into the original function. The first function that we passed in, and we're just going to return whatever that returns.
>> Bianca Gandolfo: And there you have it, so and this isn't taking into consideration a variable number of functions passed or a variable number of arguments passed.

[00:06:31]
Similarly with curry, you would have to probably,
>> Bianca Gandolfo: You'd have to keep track of how many functions there are. And then for args, here, this would be a problem with an arrow function because we'd probably would want to retain access to the argument's key word. So we'd need to use a regular function for that.

[00:06:52]
Those are some considerations for a more robust solution to compose.
>> Bianca Gandolfo: But again so here we're returning a function with an argument passed in. The second one. In this one, we're returning nested arrays until we get everything that we need to finally call our function. We retain access because parameters are just like local scope variables.

[00:07:21]
And yeah, any questions about those solutions?
>> Speaker 2: So if we wanted to basically generalize either of these we can get into like storing arguments and functions in an array. And the arguments object and then slicing it off one by one and doing that recursively? That's basically how you would kind of go about it?

[00:07:47]

>> Bianca Gandolfo: Yeah, well I think for,
>> Bianca Gandolfo: For this one, if it wasn't an error function then we had access to arguments array?
>> Speaker 2: Yeah.
>> Bianca Gandolfo: You could just, you could really just do it function apply.
>> Speaker 2: Okay.
>> Bianca Gandolfo: This, arguments. That would make it general, but for this, for calling each of those functions, with the result of that function would require some kind of loop.

[00:08:18]

>> Speaker 2: Yeah.
>> Bianca Gandolfo: Whether it's a recursive loop or a while loop [CROSSTALK] or something like that or just or regular loop?
>> Speaker 2: Yeah.
>> Bianca Gandolfo: That's what you would have to do.
>> Speaker 2: Okay.
>> Bianca Gandolfo: Yeah.

