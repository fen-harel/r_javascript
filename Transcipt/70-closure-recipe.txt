[00:00:00]
>> Bianca Gandolfo: So I've been lying to you. We've been talking about closures this whole time. So that concept we've been talking about is the elusive closure that you've heard of. Have you guys heard of a closure before? What is a closure?
>> Bianca Gandolfo: Yeah, it's when a function is inside of a function that creates.

[00:00:26]

>> Speaker 2: Scope isolation.
>> Bianca Gandolfo: It's good way to think of it.
>> Bianca Gandolfo: Yeah, so, a closure happens when you put two functions inside of a function. And you could take advantage of that by returning a function that retains access to it's parent function even after it has been executed, so that's a closure.

[00:00:53]
And you've been using them pretty seamlessly so far, it's a good job. So here's a recipe for a closure. So, closure's come in different forms, but this is kinda just a guide. So you have a parent function, right? And then you have your inner function, in between your parent function and your child function, you need to make sure that there's some variable there that you can store value.

[00:01:27]
Could be a variable that you declare or it could be a parameter value as well. Then inside the inner function, you either want to access or manipulate the function in the parent scope. And then you return that function so that later you can call it and do whatever fun stuff that you wanna do.

[00:01:53]

>> Bianca Gandolfo: Cool, so that's how you create it and then there's the execution part.
>> Bianca Gandolfo: And so the execution part is you want to call the parent function, save it to a variable. Because remember, it's returning a function that we're gonna call later, right? So we need to save it into our variable.

[00:02:14]
This variable is a function, so if I just write out test, it's gonna return a function. And then, when you call it, it'll execute the function just like we have been doing, and it'll return the scope.
>> Bianca Gandolfo: Any questions? No, okay, so this is a bit of a gotcha.

[00:02:38]
So when we call this function.
>> Bianca Gandolfo: So let's see find someone, it's gonna return speak, right? So let's call this someone speak. And the first thing we're gonna do is we're gonna define that function, nothing is gonna be called yet. Who is gonna be defined, and then we return speak.

[00:03:17]
What do you think is going to happen when we do this?
>> Speaker 3: We'll get the function body of speak.
>> Speaker 3: Undefined.
>> Bianca Gandolfo: Well, we haven't called someone speak yet.
>> Bianca Gandolfo: Okay? So, someone speak is now this function. The question is, do we have access to who?
>> Speaker 3: No because it was defined after the function was declared.

[00:04:00]

>> Bianca Gandolfo: Yeah.
>> Speaker 3: A box scope inside the original function so it didn't have access across.
>> Bianca Gandolfo: Well, it's so it's technically in the parent scope.
>> Speaker 3: So that doesn't automatically create the block unless you use the braces.
>> Bianca Gandolfo: Yeah exactly, otherwise, I mean, maybe it would be scoped to the block, which is this parent block?

[00:04:27]
Yeah exactly.
>> Speaker 2: It worked.
>> Bianca Gandolfo: Why did it work?
>> Bianca Gandolfo: So it worked because as we ran through this function, we defined speak, and then we defined our variable. Now this variable exists in this function execution context. And then we return speak, and later we called it down here.

[00:05:04]
We went back in here and this who is gonna look first in its own context and say Mh-mm, do I have a variable called who? It's gonna say no, I don't and then it will look in the parent context and it does. So even though it's visibly after that function definition, it's still valid because it has already been defined.

[00:05:31]
And you can tell by the way that it executes. That's why it's really important to understand exactly how the function executes, and in what order. Because these kinds of tricky things can come up, especially when you are returning functions from functions and all of that.
>> Speaker 2: Yeah, okay, we can see how many more.

[00:05:58]

>> Bianca Gandolfo: Okay, just two more. So here's a timer, this is one of the more famous examples of using a closure. Let's run it.
>> Bianca Gandolfo: All right, so we have our makeTimer.
>> Bianca Gandolfo: And we initialize it. So we create elapsed, we create stopwatch, which is a function that just returns elapsed.

[00:06:29]
And then we have, excuse me, we have increase which increments elapsed. And then we have the setInterval. And setInterval is just a method that will call the first, the function that's passed to it every 1,000 milliseconds. And you can change this, 1,000 milliseconds is one second, so that's why this is a second timer.

[00:06:56]
And then we're gonna return stopwatch. So let's check out what timer looks like, and it's just a little stopwatch function. Well, we can see how long ago we called that function here, so we called it about 54 seconds ago.
>> Bianca Gandolfo: And so, you can see how you could use a closure to kind of hide away functionality that you don't want people to mess with, right?

[00:07:26]
So for a timer, the consumer of this data should only have access to the time. They shouldn't be able to mess with the increase method or anything like that.
>> Bianca Gandolfo: But you may wanna return the interval in case you wanna stop it, cuz it will just go on forever.

[00:07:49]
I'm a bit confused, why is it not returning,
>> Bianca Gandolfo: Since makeTimer returns stopwatch, which is the function body of stopwatch, then we,
>> Speaker 3: We have a new timer in parenthesis, why are we not getting back zero?
>> Bianca Gandolfo: Yeah.
>> Speaker 3: Know what I mean?
>> Bianca Gandolfo: Yeah, it's because all of these shares the same scope.

[00:08:23]
So, we only called makeTimer once. So elapsed has one value and one execution context and so we returned that great. When we return it down here, we first ran all of this, which started an interval and that interval whether we like it or not and it's just gonna keep running every second and increase elapsed.

[00:08:55]
So, it's gonna call this function every second and it's gonna increase that. And so, these methods are mutating the value here.
>> Bianca Gandolfo: This function is only reading it.
>> Bianca Gandolfo: So it's being change by these functions cuz if you think about it they all live in the same execution context.

[00:09:20]
So if one value is changing it it's gonna have access to the same value. Because, again, we make the execution context here for this one as the parent scope. And just because before we didn't do that, doesn't mean that the methods can share scope and change the data.

[00:09:47]
And it can affect other things that are relying on that data. Which goes back to Michael's point, you have to be careful when you're changing your data because it can affect things.
>> Bianca Gandolfo: Just gonna keep going forever. So what happens if you just run timer without parenthesis?
>> Bianca Gandolfo: It's just a function definition, but it retains access to its parent scope, and that scope is being retained access by this increase function as well.

[00:10:26]
The increase function still has access and is incrementing it even though we're not doing it, it's being done in the back.
>> Bianca Gandolfo: All right.
>> Bianca Gandolfo: Here's the same thing with a lot of console logs, to kinda give you a feel.
>> Bianca Gandolfo: Let me open another tab.
>> Bianca Gandolfo: So, it'll be initialized and it's gonna be elapsed and then we are going to say timer, we're gonna call it, which is going to console.log('stopwatch');.

