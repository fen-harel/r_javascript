[00:00:00]
>> Bianca Gandolfo: So we're gonna talk about destructuring, which is in ES6. Two things that we need to think about when we are thinking about destructuring, and we're only gonna be talking about destructuring objects in arrays right now. We'll talk about the other kinds of destructuring later. We have the target and then we have the source, right?

[00:00:21]
So keep that in mind because I'm gonna be using those words, but let me explain what destructuring is. Destructuring is a simplified way of defining variables and taking them outside of an object or an array. So in your code, you may be doing a lot of cc var obj = this thing, {first: '}.

[00:00:59]
Someone tell me their first name.
>> off screen male: Dan.
>> Bianca Gandolfo: All right. What's a really cool last name?
>> off screen male: Coelho.
>> Bianca Gandolfo: How do you spell that?
>> off screen male: C-O-E-L-H-O.
>> Bianca Gandolfo: C-O-
>> off screen male: L-H-O after the E.
>> Bianca Gandolfo: Is that Brazillian or something? Yeah, cool. That is a cool last name, awesome. So doing something like this, and then saying var first = obj.first.

[00:01:33]
You can already see that I'm exhausted just typing this out. And then we say var last = obj.last. Who does this kinda stuff in their code?
>> Bianca Gandolfo: Probably everyone all the time, unless you're already using destructuring cuz that's what destructuring solves is it saves us from repeating ourselves in this way.

[00:01:53]
So we're gonna talk about variable declarations and assignment with destructuring. This is an example for an array. So we have an array here with the value true and false.
>> Bianca Gandolfo: And we are destructuring it so that first = true and then second = false. What's the pattern here?

[00:02:26]

>> Bianca Gandolfo: So if I say,
>> Bianca Gandolfo: Whoops.
>> Bianca Gandolfo: What's the pattern?
>> off screen male: So the array-
>> Bianca Gandolfo: Why is first true and why is second false? You were gonna say something?
>> off screen male: Yeah, it's the array of const there, it's multiple objects and they're all being assigned to those values, the related values on the other side.

[00:03:05]

>> Bianca Gandolfo: Yeah, it's just an order, right? The first, it has nothing to do with the naming here. I just named it first because I thought that would be helpful. But in retrospect, maybe that makes it a little more confusing. We can name it whatever we wanted.
>> Bianca Gandolfo: And it's just gonna be in order, right?

[00:03:24]
So imagine if this array was much longer, you could do a, b, c, d, all the way to z, and then it would just be assigned an order. So that's array destructuring for a variable declaration. Why is it variable declaration? Because we're creating a variable right there. So we're creating the variable first.

[00:03:42]
We're creating the variable second. And we're also using some other ES6 things that we haven't looked at yet, const and let. Are you guys using const and let in your code, yeah? Raise your hand if you are. Raise your hand if you kind of are but you sometimes forget and then you have to go back [LAUGH] and select all [LAUGH] and replace it.

[00:04:05]
That's me, that's where I'm at. And it's just much faster to do it the old way. And then I'm like, okay, well, I don't wanna look, I don't care, cuz I do. So I'm gonna go back and fix it. Anyway, that's enough about my life. Let's talk about this.

[00:04:26]
Is this clear, how this is working? So we're creating variables on the left, that's the target. And the source is an array with values. It's a little confusing because there's two brackets on each side. We're not used to seeing brackets on each side. We're used to seeing brackets on the right of a assignment versus on both sides.

[00:04:46]

>> off screen male: What if there's not = on each side? So if there's true false true or something?
>> Bianca Gandolfo: Yeah, let's try it. I like where we're going with this. So like this?
>> off screen male: Yeah.
>> Bianca Gandolfo: If you had to guess, what do you think?
>> off screen male: Syntax error.
>> Bianca Gandolfo: Hm?
>> off screen male: Syntax error.

[00:05:20]

>> Bianca Gandolfo: It's undefined, so it's that same as probably doing something like this, then saying = array,
>> Bianca Gandolfo: At 3, right? Cuz it's 0, 1, 2, 3 is undefined.
>> off screen male: Does it successfully assign c and d, though?
>> Bianca Gandolfo: See how it still works? The behavior isn't different, and so it's c and d.

[00:05:56]

>> Bianca Gandolfo: So that's nice. Java code's flexible like that. Cool, we're good?
>> Bianca Gandolfo: How is this different from the kind of variable declaration work that we were doing before?
>> Bianca Gandolfo: No, is that exactly the same? You can just say something obvious.
>> off screen male: It's less verbose.
>> Bianca Gandolfo: Mm-hm.
>> off screen male: It's more succinct, but it could make for really long sort of assignment lines given a large number of variables and maybe decreased readability.

[00:06:39]

>> Bianca Gandolfo: Yeah, yeah, yeah, yeah, that's true, cool. And then we have, so we have the variable declarations. And then we have the assignment. Assignment is just when the variables already exist, you can assign them. So up top, we're creating variables for the first time. Second one, we're assigning them to a variable that already exists.

[00:07:02]
So looks similar, except that we don't have the var, let, const imprint.
>> Bianca Gandolfo: Yeah? Someone asked me a question about this.
>> off screen male: When do you use constant versus let?
>> Bianca Gandolfo: Mm, I like this question. So you use const when you don't want the variable, that variable name, to be reassigned to something.

[00:07:35]
So const, if you try to reassign it to a different value, there are some caveats here. Because of what we were talking about with the objects in reference and stuff like that. But essentially, if you try to reassign const, that's why I had to make new variable names each time.

[00:07:55]
So up here, I said const c, for example. So if I say c = 3.
>> Bianca Gandolfo: It gives you an error, you can't reassign it, which is nice. It's nice as long as you know that if you say, where are we at, if const e = right?
>> Bianca Gandolfo: Where are we?

[00:08:24]
Let's just say j. Okay, so we have j, we say j.x = 3 that will work. Curious right? Why might this way work and not The other way. How about Cameron? You're the only person whose name I remember for some reason [LAUGH].
>> off screen male: What was the other way?

[00:09:08]
I was taking notes when you did the first part.
>> Bianca Gandolfo: It's okay the question was how come when we reassign c, we get an error? But when we reassign the value of x which is a property on objects. It just let's us do it. Even though we are using constants in both cases.

[00:09:30]
So anyone have any idea?
>> off screen male: Imagine constant doesnt apply to the attributes or the variable.
>> Bianca Gandolfo: The const, it's not that const doesn't apply to the properties.
>> off screen male: We are not changing j, we're just changing a property on j.
>> Bianca Gandolfo: Exactly, so.
>> off screen male: So can you not add a new property on a j?

[00:09:54]

>> Bianca Gandolfo: No, you can still add a new property.
>> off screen male: You can still do that.
>> Bianca Gandolfo: And so, if we said. J.y = 4 but what we can't do is we can't do, is we can't say j is now a different object.
>> off screen male: Can you hold the properties constant?

[00:10:13]

>> Bianca Gandolfo: What was that?
>> off screen male: Can you hold the properties constant? So for instance, j.y.
>> off screen male: If you use object.freeze.
>> Bianca Gandolfo: You're asking if you wanted to, so that you can't change the properties.
>> off screen male: Right, yeah.
>> Bianca Gandolfo: Yeah, so object.freeze would do that for you.
>> off screen male: So you'd have to wrap the object with all the properties in object.freeze.

[00:10:37]
That only goes only one layer deep, so you have objects inside of objects.
>> Bianca Gandolfo: How do you handle objects inside of objects?
>> off screen male: I use a little module called Deep Freeze [CROSSTALK]. So I think substatic proto its like a little recursive object on a freeze.
>> Bianca Gandolfo: Okay.
>> off screen male: Module.

[00:10:58]

>> Bianca Gandolfo: Yeah, so useful but just keep that in mind that it seems like it is a lot more than it is. And it can be a little bit tricky when we're using objects and raising functions, right? Our non primitive values. Primitive values will work as you'd expect.
>> off screen male: Do you want to demo object.freeze because that might be useful.

[00:11:23]

>> Bianca Gandolfo: Sure I don't actually know what goes, what are the arguments.
>> off screen male: Just put in an object like your x.
>> Bianca Gandolfo: J?
>> off screen male: Yeah.
>> Bianca Gandolfo: That's it.
>> off screen male: Yeah, yeah, exactly yeah.
>> Bianca Gandolfo: All right.
>> off screen male: So now let's just try to redefine
>> Bianca Gandolfo: What?
>> Bianca Gandolfo: Okay, so it doesn't give you an error, but it doesn't let you change it.

[00:11:48]

>> off screen male: Yeah, it doesn't throw an actual.
>> Bianca Gandolfo: Yeah, like the constant is actually throwing an error.
>> off screen male: It doesn't throw a syntax error.
>> Bianca Gandolfo: Yeah, cool. So that's const. Any other questions about this?
>> off screen female: So when to use let?
>> Bianca Gandolfo: Okay, perfect. So let allows you to reassign.

[00:12:17]
And so it's similar to Var right, so Var you can reassign, great. But Let has implications for its scope. So when we talk about scope later on today, you'll see that before let, we didn't have a concept of block scope. Is anyone coming from a language? Someone said they were doing Ruby right?

[00:12:38]
So you are probably have run into blockscope and you used blockscope. A block is just curly brackets that isn't an object, that's the way I think about it. So you can have curly brackets as an object or you can have curly objects that a block. And they could be by a function, right?

[00:12:56]
And you can create a function block. It could be on if. If block, try catch block, stuff like that. So prior to let, there was no scope to block scope. Which means that it will go into more That if a,
>> off screen male: Like an if statement, there would be no scope in the f statement.

[00:13:29]
Prior to using that.
>> Bianca Gandolfo: Yeah, part of that would just be the function scope but I haven't explained scope yet. So, I'm trying to think of-
>> off screen male: Maybe move on and revisit that?
>> Bianca Gandolfo: Yeah, we can move on. Just note that it has implication with scope and behaves differently.

[00:13:44]
Yeah cool, good question.
>> off screen male: So it's basically the difference between global and local variable.
>> Bianca Gandolfo: It's a similar idea it's not the same.
>> off screen male: Okay.
>> Bianca Gandolfo: But it's about different. Where a variable reference has access to a value, right. Sometimes curly brackets will define that, sometimes they don't.

[00:14:13]
And let-in bar has something to do with that. Has everything to do with that. So, cool, great, destructuring.
>> Bianca Gandolfo: And here is for objects,
>> Bianca Gandolfo: What's the pattern here?
>> Bianca Gandolfo: So.
>> Bianca Gandolfo: Anyone, how about we start right here?
>> off screen male: The Key and value, they have the same name.

[00:15:00]

>> Bianca Gandolfo: Yeah, so the property name and the target decorations have the same name. What did I do wrong? Do I have a syntax error? Syntax error, first of the.
>> Bianca Gandolfo: Well, okay. So let's check out what first one. Is undefined, that's not at all, it has to match, giving it all away.

[00:15:41]
What? First one has already been declared, well fine. Ok, we're good. So first one zero. second1 is 1. So who can tell me how this works? How about?
>> off screen female: It's working because of the order is similar to last time and then the matching names of the objects.
>> Bianca Gandolfo: Yeah, so the names have to match in this case.

[00:16:22]
So objects don't have an order, but it just happens to be in order in this example. But yeah. So same thing, we are creating a variable, we are assigning a variable called, first, to the value of the first property. And we're assigning the value second to the value of the second property.

[00:16:48]
Yeah?
>> off screen male: So the order doesn't matter in this declaration or assignment?
>> Bianca Gandolfo: No, the order does not matter, no, no.
>> Bianca Gandolfo: Whenever you start thinking that objects have an order or should have an order, you should be using an array.
>> Bianca Gandolfo: And if you're expecting an order from an object, sometimes it'll always come that way.

[00:17:10]
But that's a bad expectation cuz it's not guaranteed. Although sometimes it seems like it comes in order.
>> Bianca Gandolfo: Cool, so that's destructuring. It just makes getting values out of objects and arrays, have less typing. And we like less typing, as long as it's still readable. You know, as long as we can understand what you're doing, awesome.

[00:17:44]
Once you start to get out of that range that's when we start to have problems. That's where some people are very dogmatic about it. Cool, questions? About this?
>> off screen male: I don't really follow here where are we creating an object and where are we creating properties?
>> Bianca Gandolfo: Yeah, so that's the confusing thing is cuz the syntax looks really similar.

[00:18:13]
So the way that I think about it is, you're always, whenever you create a variable or you assign a variable, it's always gonna be on the left. You say, var x equals y. You don't say, y equals x bar or something backwards like that, so just remember that.

[00:18:28]
And,
>> Bianca Gandolfo: Yeah, and then the right-hand side is gonna be the value, just like in that example. And it also helps that for the variable declaration, it says const let var, whichever one you're using in that case, and that gives you a hint. Yeah, a lot of times, it's not even going to be a literal like this.

[00:18:57]
It's just going to be like,
>> Bianca Gandolfo: Like my obj equals this. And then,
>> Bianca Gandolfo: Come on.
>> Bianca Gandolfo: It's gonna be,
>> Bianca Gandolfo: Maybe not, can someone spot my syntax error?
>> off screen male: Do you need a bar or before the object?
>> Bianca Gandolfo: I don't think so, I can try.
>> Bianca Gandolfo: No.

[00:19:50]

>> Bianca Gandolfo: Weird, okay. Well typically, you're not looking at an object literal, but you're looking at a reference of a,
>> off screen male: If it's already been declared is that const freaking out?
>> Bianca Gandolfo: I don't know.
>> Bianca Gandolfo: Okay, I'll figure this out and get back to you. Dun, dun, dun, it's a mystery.

[00:20:20]
That's why I like mysteries because when I don't know something then it's just a mystery, it's not that I don't know it. Awesome.

