[00:00:00]
>> Bianca Gandolfo: Here is what I was saying about non-valid characters. Well, I think just something to keep in mind is just try not to use invalid characters as property names. If you really have to do it, fine, but this is not a very good naming here on this line, so try to avoid that.

[00:00:23]
But anything like this, right, if you put quotes around it, it's fine. Similarly in the object literal notation, you need to put around quotes. Remember we were saying before we didn't have to? But if you're using non-valid characters, then you have to. And then for the zero here, that's another thing that makes it seem an array is special, but it's not.

[00:00:49]
You can set a zero property on an object, right.
>> Bianca Gandolfo: Oops!
>> Bianca Gandolfo: That shouldn't be too surprising. But it makes it seem unusual because we don't put the quotes around the brackets. And in this context, with the bracket you can put anything that can be evaluated actually, so you could say like, two plus two, stuff like that.

[00:01:33]
So that's why it's seeing this as something that needs to be evaluated rather than something that needs to be coerced directly into a string, kind of like a variable name. Not that a variable name is a string.
>> Bianca Gandolfo: Okay, awesome. Any questions?
>> Bianca Gandolfo: No?
>> Speaker 2: Question in the chat.

[00:02:01]

>> Bianca Gandolfo: There's a question in the chat?
>> Speaker 2: Yeah, does person quote or in brackets quote zero evaluate to an array method or an index position of that array?
>> Bianca Gandolfo: So the question is if.
>> Speaker 2: The answer is the value of the
>> Speaker 2: zero index of that array.
>> Bianca Gandolfo: Yeah I just wanted to write it out.

[00:02:28]

>> Speaker 2: Yeah, go for it.
>> Bianca Gandolfo: So the question was, what does this evaluate to?
>> Speaker 2: Mm-hm.
>> Bianca Gandolfo: And the answer is that,
>> Bianca Gandolfo: so when we say an array method, what I'm talking about are functions that are on your array such as, .push, right? .pop, things like that.

[00:03:01]
That's an array method.
>> Bianca Gandolfo: And we know it's a method because, look we need to put parentheses next to it. Versus a property, such as the length property which we do not need to call because it is not a function.
>> Bianca Gandolfo: Yeah, cool. And if you're interested in deep diving and this kind of thing, the first version on this course has a lot of exercises on implementing this kind of stuff, like an array with the .length property without using an array, right?

[00:03:41]
We use an object and things like that, so that's kinda fun. So if this is cool to you, then I recommend doing that. Awesome.
>> Speaker 3: In one of the examples you put up there, you had an array when you had a type of,
>> Speaker 3: Equals array. Is there ever an example of that is true?

[00:04:07]

>> Bianca Gandolfo: No, yeah. But if you do want to check if something's an array, which you will later on when we start implementing each map, you can use array.isArray. And then you can pass the array. That's the traditional one, yep.
>> Speaker 2: Can you pass in a function as an index of an array?

[00:04:32]

>> Bianca Gandolfo: So when you say index that implies that-
>> Speaker 2: As a key.
>> Bianca Gandolfo: As a key?
>> Speaker 2: Well like, eight brackets function.
>> Bianca Gandolfo: I mean, you could. So the question is, can you do this?
>> Bianca Gandolfo: Right?
>> Speaker 2: Yeah.
>> Bianca Gandolfo: And, it's just gonna stringify that function. So we can look at the key.

[00:05:08]

>> Bianca Gandolfo: Let's see. So this is going to return all of the keys of the object. I just wanna get the very first one and hopefully this works. And I'm gonna do the type of, and it's a string. So just to clarify, that's what it's returning. So you are putting it in the bracket, it's just stringifying it.

[00:05:33]
So you can't call this function later, right? And because of this weird functionality of it stringifying, and it could stringify in different ways, I don't recommend doing this. But for funsies, yeah you can.
>> Speaker 2: As long as it returns the string, you could wrap it in a function expression and then-

[00:05:55]

>> Bianca Gandolfo: Yeah, if you call the function, then yeah, that's
>> Bianca Gandolfo: different. So we can,
>> Bianca Gandolfo: Wrap it,
>> Bianca Gandolfo: And then call it, yeah? Are you guys following? So I wrote out a function, I defined it, I wrapped it in parentheses cuz we're gonna immediately invoke it and it's an anonymous function.

[00:06:22]
And this function is gonna return 3, so these brackets are gonna evaluate this line.
>> Bianca Gandolfo: And so you can see.
>> Bianca Gandolfo: Now it's 3.
>> Bianca Gandolfo: Not the most useful thing in the world but maybe. I've never had to do that.
>> Speaker 2: Sometimes if you have to call it to a function to grab the idea of something, right?

[00:06:49]

>> Bianca Gandolfo: Yeah, I guess if you're like, yeah.
>> Speaker 2: Maybe.
>> Bianca Gandolfo: Maybe. Yeah, I've never had to do anything like that, but I could,
>> Bianca Gandolfo: Maybe. There are probably better ways to write that so that's more readable.
>> Speaker 2: Probably.
>> Bianca Gandolfo: Yeah, cuz a lot of people, just like maybe you guys didn't know this before I told you this, a lot of people don't know this, and you don't want to just throw craziness at people when they're reading your code.

[00:07:15]
Just as a rule of thumb, try to keep it to the point, and don't get too fancy. If you're the kinda person who likes to take it to the edge, then you'll really like functional programming. There's this whole cult of people who are always pushing it to the edge and seeing how many less lines of code and less characters they can do the same thing.

[00:07:40]
Only like people in the cool kids club can understand what they're doing and I'm not part of that club and I'm not trying to join. But maybe you are, maybe you wanna go through like the hazing of it and have that experience. Maybe, awesome, these are great questions.

[00:08:00]
One more question. What's my next slide? Okay. One more question and we're gonna jump to exercises. How about, who has not asked many questions? I feel like you guys are a quite bunch. I'm a little bit disappointed, to be honest. You guys have to get on this blue stuff.

[00:08:29]

>> Speaker 4: One question I have. Earlier you said something about, well throughout you have been talking about the similarities between arrays and objects. So then what is the difference?
>> Bianca Gandolfo: Yeah, that's a good question. So an array is a special kind of object. And they have really the most special thing about an array is the .length property, which a property that is computed as you add numerical indices, and numerical indices are different than properties on an array.

[00:09:09]
Because an array captures that and will increment the length, right? So if you say, do we still have our Y in here? Yeah, so if you say Y, Y.length, it's 1. But if we say Y.hello = goodbye. Can you guys see that at the bottom?
>> Bianca Gandolfo: Y.length is still 1.

[00:09:35]
So there's a special behavior here for arrays around its numerical indices. So any number-
>> Speaker 2: Show setting wise numerical indices and having the length changed?
>> Bianca Gandolfo: What's that?
>> Speaker 2: Could we see a demo of adding numerical indices and seeing the length change?
>> Bianca Gandolfo: Yeah so, well,
>> Bianca Gandolfo: so we can add for example an interesting thing that happens, we have Y.

[00:10:06]
So length one, right? We have one value in there, true. Let's set the 10th one to false, and then we have a bunch of empty ones. And let's see what the length is. Yeah. So there's special behavior around those numerical indices. And there are methods that you can use to take advantage of this.

[00:10:33]
So some cool ones are like reverse. So the cool thing about having numerical indices is that they're ordered. And when things are ordered you can reverse them, right? With an object we don't really have any such order. So for things like sorting and the order, and what else?

[00:10:56]
What's interesting about an array that we can't do with an object?
>> Bianca Gandolfo: It's a lot easier to loop through an array than an object as well.
>> Speaker 5: Could you open up that object to see what-
>> Bianca Gandolfo: This one?
>> Speaker 5: Yeah,
>> Speaker 5: what are the
>> Bianca Gandolfo: Yeah, so also be careful when you expect the Chrome Developer Tools to print out, tThis is just a representation of the array, right?

[00:11:34]
It probably looks very different in memory, or it definitely looks different in memory. And some different developer tools and different versions of Chrome Developer Tools will actually print out different things, so just be careful. If you see variants in what a console.log() is showing you, it's not necessarily because it's a different behavior.

[00:12:00]
Sometimes some,
>> Bianca Gandolfo: Developer tools will hide these properties. And they'll only show the numerical indices. So you'd have to check that explicitly, like y.hello and it will still return something, but for whatever reason, when it's representing it in the console, it just throws it out. So I think even when I first taught this course that I had to prove that it was there, I couldn't just print it out and show it was there.

[00:12:36]
So that was just a few years ago.
>> Bianca Gandolfo: Yeah.
>> Speaker 2: Is, [COUGH], giving an array object a property, is that uncommon to do?
>> Bianca Gandolfo: To give an array-
>> Speaker 2: Yes, so for instance, when you gave assigned the property goodbye. Is that uncommon to attach that to an array?

[00:13:05]

>> Bianca Gandolfo: In application level code, you typically don't do stuff like this. But in libraries and stuff, it happens a lot, yeah. But it's important to know this just so you'll understand that the rules are consistent, that arrays are objects, right? So that's why I use it as an example.

