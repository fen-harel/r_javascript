[00:00:00]
>> Bianca Gandolfo: We're gonna move forward with a similar idea of going through lists and transforming them. We are gonna through in a function now. So this function is called CreateSuspectObjects. And what does it return? Who feels like they've been neglected? Avoid my eye contact if you feel neglected. [LAUGH] That's forcing you to actually look at me, that's so funny.

[00:00:33]

>> Bianca Gandolfo: What about, I feel like we chat a lot, but maybe I don't call on you as much, so maybe you guys are neglected over here. What does this function return?
>> Speaker 2: It looks like it returns an object, but there's a lot going on.
>> Bianca Gandolfo: Yeah, what makes you think that it's returning an object?

[00:00:56]

>> Speaker 2: Honestly, the curly brackets-
>> Bianca Gandolfo: Yeah.
>> Speaker 2: And the object properties that we're looking at here.
>> Bianca Gandolfo: Yeah, ding ding ding, exactly.
>> Speaker 2: So, yeah.
>> Bianca Gandolfo: Cool, so we're returning an object.
>> Bianca Gandolfo: We're finding some properties on this object, right? We have three properties, we have a name property.

[00:01:13]
And this name's getting passed in, right? So we have just this function and it spits out an object, when you give it a name and it figures out it's color by splitting the name at the space and getting the second one. So Scarlet, Mustard, White and then it has a speak function where it says its name.

[00:01:40]
Yeah, so we have this colon syntax here that's the object literal syntax that we were looking at earlier. Often on the side, right we've been working a lot with dynamic properties adding things after we initialize the object. But here's just an object giving it to you all at once.

[00:01:55]
But it's the same thing. The key here is that there's some curly brackets. We don't see any key words around it like function or if or something like that, that may make it feel like it's something else. And also, we can't return things if and things like that, but we can return functions.

[00:02:15]
Cool, and then, we have an array of suspects. So we have some more suspects now. We have Colonel Mustard on the scene. Wonder what happened to Rusty. I don't know. So
>> Bianca Gandolfo: can someone spot the difference?
>> Speaker 2: [LAUGH] Is it that you called a speak immediately?
>> Bianca Gandolfo: There is something different about speak, I will admit.

[00:02:42]

>> Speaker 2: It's a method on the object now?
>> Bianca Gandolfo: Yeah, so this is a method. This is an ES6 feature where we can add methods like this, no colons, just straight on there. Works the same, no surprises, not an error function or anything like that, just a regular function, so there you go.

[00:03:02]
There you have some ES6, okay.
>> Speaker 3: Like need the function keyword for speak.
>> Bianca Gandolfo: Nope, not in this case.
>> Bianca Gandolfo: Yeah, all right. All right, so we're initializing the empty suspects list and, actually before I give it away. What we wanna do is, we wanna initialize each suspect into an object.

[00:03:36]
I call this like hydration, like we're hydrating data into an object. It's not the most, I'm not using it very academically when I say that though like people have opinions on what hydration is and isn't. In this case, when I say we're hydrating an object, that means we're just taking a data, a piece of data and we're turning it into some data structure, right?

[00:03:59]
And your applications, you probably have a view model or something. You guys work with view models at work maybe, and you have some data coming in or even just a model, right? You've some data coming in either from the backend or if in the case of your view model maybe you have data coming in from a user.

[00:04:21]
Who knows? And to me, I would say that when we take that data and we turn it into an object or like a class, that's like hydrating it. Does anyone else? I hear some people use it like that, but I also hear people using it in a lot of different ways.

[00:04:40]
Does that make sense? Have you guys taken data and turned it into a class or an object? Yeah, can I just see if that's something people have done? Okay, okay. Cool. So that's what we're going to do here. So this function is kind of like a class. In JavaScript, classes really are just functions that return objects.

[00:05:01]
So this is really a class in as much as using the keyword new or whatever is a class, except in this case we don't have to worry about the keyword this. Who really understands the keyword this? I do, cuz I teach it, but most people don't. So we're not doing that today, because that just a whole other tangent that I would love to get in.

[00:05:24]
I think I actually have in one of my courses, actually I think in data structures and algorithms course, if you wanna learn about the keyword this. That's one of the very first, I do an object oriented programming piece and you can look into that and look at the different styles.

[00:05:41]
Anyway, so we're gonna hydrate this list. What do we do? So we have the suspectslist, which needs to be a list of objects created from the create suspect objects function. Are you guys following me here? I'm saying suspects a lot and it is very difficult. So we want Miss Scarlet to have a function with a name property that says Miss Scarlet, right?

[00:06:07]
When we say Miss Scarlet.speak, I want it to say, my name is Miss Scarlet, that kind of thing, yeah? We're good? Okay, what do we do? How do we do it? Do we use destructuring here? No, I'm just kidding.
>> Bianca Gandolfo: What do we do? How about this corner?

[00:06:35]

>> Bianca Gandolfo: Cameron's like, don't look at me. [LAUGH] Christina? Could just take a stab at it.
>> Speaker 4: Well, if you said
>> Speaker 4: Miss Scarlet
>> Speaker 4: .speak, it should.
>> Bianca Gandolfo: Yeah we will need it, initialize it first.
>> Bianca Gandolfo: So basically, what needs to happen, is we need to pass this string to this function, so that we have an object that has Miss Scarlet with the name that should say Scarlet, etc.

[00:07:32]

>> Bianca Gandolfo: That make sense?
>> Speaker 4: CreateSuspectsObjects, you mean calling the function?
>> Bianca Gandolfo: Yeah.
>> Speaker 4: Okay, great.
>> Bianca Gandolfo: So we'll do CreateSuspectObjects.
>> Bianca Gandolfo: And then what?
>> Speaker 4: And then, the name, Miss Scarlet.
>> Bianca Gandolfo: But let's get it out of our suspects.
>> Speaker 4: Yeah. Okay, it's 0, yeah.
>> Bianca Gandolfo: Something like that.

[00:08:02]
Yeah, so we call it like that. Of course, this isn't gonna work.
>> Bianca Gandolfo: Okay, do I have any typos?
>> Speaker 4: Naming split still says one.
>> Bianca Gandolfo: It should say one, I think.
>> Speaker 4: Well for zero and one.
>> Bianca Gandolfo: Cool. Is it gonna work? Is it gonna explode? Ahh.

[00:08:41]

>> Bianca Gandolfo: There we are. There's our hydrated object with Miss Scarlet. Cool. Straight forward. Awesome. So we can loop through our list and, I kinda messed up my indentation, but we can look through our list, right? So we start at 0, we go all the way up to the length of the suspects, we increment each time, right?

[00:09:11]
That's what this says. And we're gonna assign a suspect, right? Maybe you wanna say let here, right? Cuz we're gonna reassign it
>> Bianca Gandolfo: And we're gonna pass CreateSuspectsObjects, suspects at one or sorry at I. Then we're gonna push suspect into the suspectsList.
>> Bianca Gandolfo: Seem fair? So we're looping through a collection, hydrating it, creating instances of these objects, suspect objects.

[00:09:51]
Cool. Have you guys done this kinda thing before? Yeah, okay. Cool. Here's that with the last line. Combined, so we just say CreateSuspectsObjects, suspects at i and put that inside a push.

