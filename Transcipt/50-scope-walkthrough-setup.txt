[00:00:00]
>> Bianca Gandolfo: We're gonna move on to scopes now. We're gonna do an interactive exercise. We're gonna do that game that we really like to play. Everyone was like, I really like it, Bianca, when we play that game where everyone goes in a line and says what happens next. Especially when it's tricky and I say the wrong thing.

[00:00:20]
It's gonna be one of those moments. So we're gonna go through this. It's a testing suite and all of these tests are testing various combinations of scope. So scope is just the area where a variable has access to some value. So when we're defining variables, we know that there is such thing as global variables, and local variables and the like, right.

[00:00:53]
A global variable is available throughout the entire code base and usually we declare that by just not putting a bar in front of something. Usually not a good idea or we could attach it directly to the window object. So that's a global variable and then we have local variables that are inside of functions, or inside of blocks.

[00:01:19]
And there are some tricky rules around when certain variables have access to certain values and not. And so we're gonna through some scenarios, we're gonna run this code, and see what happens. And then there's the testing suite here, we wanna get the test to pass. So I'm gonna describe what these tests are doing, so that we get a little bit more familiar with this code base.

[00:01:44]
But really, what you should be worried about, is the function body of the callback of the it statement. So one that says it, bla bla bla, it's the body of the function. So, let's start at the top. So, this is just a regular testing suite. I think it's mocha maybe and we're wrapping in this function.

[00:02:18]
It goes all the way down here and then we're immediately invoking it. That's what those parentheses are doing, so it's wrapping an anonymous function and then invoking it immediately. And then we have this describe block which, what do you think if I did type of describe? What do you think that would be?

[00:02:39]
Cameron?
>> Cameron: Undefined.
>> Bianca Gandolfo: Undefined? That's a good guess.
>> Cameron: Object.
>> Bianca Gandolfo: Object? Who thinks it's going to be an object?
>> Bianca Gandolfo: Who thinks that it's gonna be something else? What do you think it's gonna be, Eddie?
>> Eddie: A function?
>> Bianca Gandolfo: Why?
>> Eddie: Because it has the parentheses of scope exercises etc., right next to it?

[00:03:16]

>> Bianca Gandolfo: Yeah, it looks like it's a function being called, right? Yeah, and that's what it is.
>> Bianca Gandolfo: So describe is a function, and it takes two arguments. One is a string that describes this block, and then a callback function that has a few different tests. And so if we look at our UI over here, we see that it creates this scope exercises title and then it has all of our tests inside here.

[00:03:48]
Okay, so we have an actual variable that we're just initializing here and then we have a before each function. It's before each Function just is called before each it block. So when you see this ending this will be called automatically. Have you guys done test driven development or a written test like this?

[00:04:16]
Cool, awesome. Okay, so then we have it block, and what do you think this is, if we said typeof it?
>> Speaker 4: Function.
>> Bianca Gandolfo: Yeah, also a function. So the first thing it takes is a string that's a description of what it is testing. And the second thing is a callback function that is expecting it to return, whether it's passing or not.

[00:04:51]
So this says expect actual to equal the string inner to be true. What do you think this evaluates to, what does that return?
>> Speaker 5: A boolean.
>> Bianca Gandolfo: That's a good guess, it has to return some sort of object right? Cuz we have these dots.
>> Speaker 4: To be true so yeah boolean.

[00:05:21]
Double down on it.
>> Bianca Gandolfo: Some sort of object that has something like this.
>> Bianca Gandolfo: You see that?
>> Speaker 6: Like an array of objects?
>> Bianca Gandolfo: Well that's the only way you could get these dots to work in JavaScript, right? To be true, we should put something like that.
>> Bianca Gandolfo: Anyway, I'm just showing you that there are some interesting applications to all of the rules that I was saying before, but they don't change.

[00:05:57]
They look a little crazy, but people are just building on the rules that we went over, and doing creative things with them.
>> Bianca Gandolfo: And they're just doing-
>> Mark: They're asking where does to.be come from. That's-
>> Bianca Gandolfo: I think it uses mocha, yeah.
>> Bianca Gandolfo: I think the describe before each is mocha and then the expect might be try, I don't know, I'd have to look.

[00:06:28]
I haven't looked at the-
>> Mark: But the library is basically all that you'd have to say there.
>> Bianca Gandolfo: Yeah it's from the library. We're using a library here and I'll share this after, and you guys can have it and play with it. Okay, so I just gave you a little tour of what's going on.

[00:06:46]
Any questions so far, before we get started?
>> Bianca Gandolfo: Okay, I want one question before we move on.
>> Bianca Gandolfo: Just make up one, I like the silly one, the funny one.
>> Speaker 4: Is well, is there a reason actual is all caps?
>> Bianca Gandolfo: Just to make it stand out, really.

[00:07:15]
Because if you see, we're going to be re-assigning actual a bunch of times, just to see what the value will hold. Yeah, cool and so knowing that, in java script we have function scope. Do we know that? Have you guys heard about function scope? Is that something you've heard of?

[00:07:46]
So before recently, we only really had function scope. And that means that variables that were inside of a function only had access to the values defined there, or in the parent function. So for example, here is a function, here is an inner function, okay? If we had a variable name, for example, we couldn't access it over here,

[00:08:22]

>> Bianca Gandolfo: Because it's outside of this function's scope.
>> Speaker 6: So in the function or child functions?
>> Bianca Gandolfo: What do you mean?
>> Speaker 6: You said parent function before. So you can access variables declared in a function or in functions declared in that function, but not the other way around?
>> Bianca Gandolfo: No, only in the parent.

[00:08:44]

>> Speaker 6: Only in the parent.
>> Bianca Gandolfo: So you can only look up.
>> Speaker 6: You can only look up.
>> Bianca Gandolfo: So if you think of scope as sort of like a hierarchy, you have a global scope being available to everyone. And that's your window object, things on the window object if you're working in a browser.

[00:08:58]
And then you have your first function, and then your nested function. And you can think of it as like your global scope, outer scope. Inner scope, more inner, inner, inner all the way down, as many deep, yeah. And so inside of the function you can only reach for values in the outer scopes.

[00:09:23]
All the way up the chain though. And then, through that sort of chaining from inner to outer, we have masking of values. So if I declare a value in here and I also declare a value out here, then this name is going to be inner. Even though the name out here will be Mark and so once I get out of this function if I reference name this is going to be mark.

[00:10:01]

>> Mark: My name is in a video.
>> Bianca Gandolfo: Yeah you're famous now.
>> Mark: Thank you Bianca.
>> Bianca Gandolfo: You're welcome.
>> Mark: There's a question in chat about the very first line.
>> Bianca Gandolfo: Line one?
>> Mark: Immediately invoked function expression.
>> Bianca Gandolfo: What about it?
>> Mark: Just, didn't know why it was there.

[00:10:28]
I didn't know what and if he is, you know what I mean?
>> Bianca Gandolfo: Yeah.
>> Mark: Is that something you're getting into?
>> Bianca Gandolfo: Not really.
>> Mark: Okay.
>> Bianca Gandolfo: All you need to know is what this does is it lets you call the function immediately. So once this page is loaded, it will just call this function immediately.

[00:10:55]

>> Bianca Gandolfo: That's all.
>> Bianca Gandolfo: And we'll set up all of our tests.
>> Mark: Can we show the bottom part of that?
>> Bianca Gandolfo: Yeah, I showed it earlier, but I can show it again. So here we are I'm calling it. Uh-oh, there's a clue down there, I should get away from there.

[00:11:13]
Okay, great, so we're gonna walk through how the function is running inside of these if blocks.

