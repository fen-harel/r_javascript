[00:00:00]
>> Bianca Gandolfo: So, our task is to get through this data structure however creatively we want, and figure out which room our suspects were not in. So for example, Miss Scarlet on the night she was in the conservatory, Reverend Green, he was in the kitchen. Colonel Mustard was in the billiards room, etc.

[00:00:26]
So we wanna find out whose was not. Which room no one was in?
>> Speaker 2: But we only need the room, right?
>> Bianca Gandolfo: What?
>> Speaker 2: We only need the room?
>> Bianca Gandolfo: Just the room.
>> Speaker 2: Okay.
>> Bianca Gandolfo: Yeah, cuz if no one was in there then, do you know what I mean?

[00:00:40]
Yeah awesome.
>> Bianca Gandolfo: So, they have our data structure here. Let's get in JavaScript and also in JavaScript.
>> Bianca Gandolfo: So.
>> Bianca Gandolfo: How'd you guys attempt it?
>> Bianca Gandolfo: Anyone attempt it?
>> Speaker 3: [INAUDIBLE] [CROSSTALK]
>> Bianca Gandolfo: What?
>> Speaker 3: I started by created a variable dining room.
>> Bianca Gandolfo: Okay.
>> Speaker 3: And tried using reduce.

[00:01:21]

>> Bianca Gandolfo: Mm-hm.
>> Bianca Gandolfo: So we have some notInRoom = function perhaps. Maybe we wanna make this fancy.
>> Bianca Gandolfo: Okay, and then maybe reduce.
>> Bianca Gandolfo: Okay.
>> Bianca Gandolfo: So for our list, probably for reduce, if we we wanna do newDevelopment.
>> Bianca Gandolfo: And maybe notInRoom is our callback.
>> Bianca Gandolfo: And so what we wanna take from this, is what?

[00:02:11]

>> Bianca Gandolfo: What do we wanted to return? We wanted to return may be in a ray of rooms.
>> Bianca Gandolfo: Living room.
>> Bianca Gandolfo: Bathroom or something like that. Seems reasonable, so we wanted to return an array.
>> Bianca Gandolfo: And then.
>> Bianca Gandolfo: So if we wanted to return an array, we should start with an initial value of an empty array.

[00:02:43]
That's a trick.
>> Bianca Gandolfo: And, we wanna make sure that we wanna push that value to our memo.
>> Bianca Gandolfo: .push, whatever it is that we are gonna push, okay?
>> Bianca Gandolfo: So whatÂ´s this first thing, maybe like the room?
>> Speaker 4: Rooms.
>> Bianca Gandolfo: Good catch, rooms. So.
>> Bianca Gandolfo: Really, this is going to be the suspect.

[00:03:39]
And then we have to get into suspect.rooms. Right, because reduce is just gonna leap through the top level. And so the first object in or top level is a suspect. So if we wanna get to the rooms, we have to reference it like this. suspect.rooms. And then we eventually wanna push the room where like, they're not there.

[00:04:05]
None was there, something like that. Okay?
>> Bianca Gandolfo: All right, so what do we have to do next?
>> Speaker 5: The way I did it or tried to do it was just take all of the room's arrays, and then concat them together.
>> Bianca Gandolfo: And then loop and see?
>> Speaker 5: But you'd have a key in object.

[00:04:36]
No, you'd have a pair for each entry. It would be either room and then true or false.
>> Bianca Gandolfo: So if the data structure you're created look like what, it was an object?
>> Speaker 5: So it would be like, I was in array of objects that had room and then boolean for each entry.

[00:05:00]

>> Bianca Gandolfo: Got it. So it would be like.
>> Bianca Gandolfo: 'billiards-room', like that?
>> Speaker 5: Yeah.
>> Bianca Gandolfo: Okay.
>> Speaker 5: But I don't think that's.
>> Bianca Gandolfo: And it would return true if it is not in the room. So no one was in the billiards room it would be true, is that what you were thinking?

[00:05:22]

>> Speaker 6: Well I was gonna start with just putting all the arrays in to get it out of the, actually there's no point in doing that never mind. [INAUDIBLE] and reduce it? [CROSSTALK]
>> Bianca Gandolfo: You would have an array of, like this?
>> Speaker 6: Yeah.
>> Bianca Gandolfo: Yeah. Okay, so that's another thing we could do is we could, and then you can reduce this too.

[00:05:42]

>> Speaker 6: That was [INAUDIBLE] to reduce twice.
>> Bianca Gandolfo: What's that?
>> Speaker 6: You might not need to reduce twice and that's a second level thing, so.
>> Bianca Gandolfo: Yeah, we're gonna have to loop, I think we will have to reduce twice. So do some sort of reduce like functionality, because we need to figure out which ones are false here, and come up with a list of all of the false ones.

[00:06:13]
And then we need to do it for all of them. And then we need to do it across all of the suspects. So it's kind of a two dimensional thing.
>> Bianca Gandolfo: Okay.
>> Bianca Gandolfo: All right, so where were we? So we have two approaches.
>> Bianca Gandolfo: We can reduce this array after we create this data structure.

[00:06:45]

>> Bianca Gandolfo: Or we can try all do it in one go.
>> Bianca Gandolfo: Which would be something like.
>> Bianca Gandolfo: Do you guys see what I'm doing? So what we wanna do in this reduce, is we want to return an array of all of the falses. So for example, for Miss Scarlet, we wanna return the billiards room, the ballroom and the kitchen.

[00:07:43]

>> Bianca Gandolfo: And then we wanna reduce it again, from.
>> Bianca Gandolfo: So eventually, let's see so we'll have our.
>> Bianca Gandolfo: For each suspect we're gonna get an array. And then we need to flatten that array, no, and then we need to make a opposite unique. So, if there's a duplicate we need to remove it.

[00:08:23]
Does that make sense? So the first time we reduce it we're gonna get.
>> Bianca Gandolfo: Kitchen.
>> Bianca Gandolfo: Ballroom.
>> Bianca Gandolfo: And billiard room.
>> Bianca Gandolfo: Okay, for Ms. Scarlet. And then the next person, it's gonna be something like this.
>> Bianca Gandolfo: Ballroom, conservatory, dining room there's some more rooms. Okay let's just say

[00:09:23]

>> Bianca Gandolfo: So when we reduce these two. Well, what we really want to do, is compare between these two data structures and see, we want. So, if these two are shared, we want to keep it. If this one's not shared, we don't want to keep it, because that means that this person, Reverend Green, had been in the billiards room.

[00:09:54]
Can I add thumbs, I guess falling? Okay, so
>> Bianca Gandolfo: Getting from here
>> Bianca Gandolfo: We need to somehow,
>> Bianca Gandolfo: we need to find, there's, we can use a difference. We can do the difference of the arrays.
>> Bianca Gandolfo: So, I believe,
>> Bianca Gandolfo: There is something called difference; let's check out the documentation.

[00:10:35]

>> Bianca Gandolfo: All right. So, it creates an array of array values not included in the other blah, blah, blah. Perfect, so that's what we'll do. We'll use difference for those.
>> Bianca Gandolfo: So, may we don't need to reduce so many times after all, yay. Now it's gonna get a little crazy.

[00:11:02]

>> Bianca Gandolfo: So let's call this our,
>> Bianca Gandolfo: So we're gonna get multiple arrays, and I'm going to store it, and we can store it in an object, or we can store it in an array. I'm just thinking What is gonna be the best method of doing that?
>> Bianca Gandolfo: Hm, I'll just going to put in array right now, so as we reduce,

[00:11:38]

>> Bianca Gandolfo: Rows
>> Bianca Gandolfo: So let's call these the empty rooms.
>> Bianca Gandolfo: So we will reduce it, this is going to return an array.
>> Bianca Gandolfo: There we go.
>> Bianca Gandolfo: Room, memo.
>> Bianca Gandolfo: suspect.rooms, then we need to loop through this. Let's just do one thing at a time. So, let's say if, so we want to say if it's false, so if suspect .rooms is false) memo.push, sorry, we want to say room here.

[00:13:07]
Push the room and then you want to return Memo, so what we're doing here is we're looping through the suspect.rooms. For each room we're seeing if the value is false, if it is we're gonna push it into our memo which is an array. Because we initialize it as an array, so this is for one suspect.

[00:13:35]
So at the end of this, we're going to create this emptyRooms variable. Okay, but we need to do that for multiple People.
>> Bianca Gandolfo: It seemed a lot simpler in my head when I wrote the exercise. So let's just map this.
>> Bianca Gandolfo: So we want it to return, yeah, so we want to map it.

[00:14:27]

>> Bianca Gandolfo: Map the newDevelopment, over notInRoom. And this is gonna be our notInRooms, so this is going to, loop over a new development. It's going to pass our suspect object into this function, and then we're going to reduce the suspect.rooms which is in array. This is gonna return in array of all the empty rooms, so map is going to be an array of arrays, of all the empty rooms.

[00:15:22]

>> Speaker 7: Could you do that one more time?
>> Bianca Gandolfo: Yeah.
>> Bianca Gandolfo: Let's Yeah, okay, so newDevelopment.
>> Bianca Gandolfo: Let me just put a word wrap here.
>> Bianca Gandolfo: Okay, so newDevelopment, right, is an array of objects, we're gonna map over it. So we're looping through, and we wanna map because we want the array to be the same length.

[00:15:51]
As the array that were passing, yeah.
>> Bianca Gandolfo: So here's our first item, that's gonna get passed into not in room That's our suspect. We're gonna reduce the suspect rooms, so we're digging into the suspect rooms. We're gonna pass the room, that's just how reduced works, and the memo.

[00:16:19]
We're gonna initialize it as an empty array. SoeEvery time we loop through for each room if it's false, we're gonna push a new room into memo and return it. So the first time it finds an empty room, it's gonna push kitchen. It's gonna return memo, which is an array.

[00:16:40]
It's gonna have an array with kitchen in it. If it is true it's just going to return memo anyway. It is not going to add anything to it though. It is like a fancy filter. You guys see how it works? Okay, and then we're gonna return that array.

[00:17:07]
So that would look something like this. And then map is gonna start looking something like this.
>> Bianca Gandolfo: And then the second time it goes through, it looks something like this.
>> Bianca Gandolfo: Yeah.
>> Bianca Gandolfo: And then we'll have this data structure, and then we want to difference it, and that will give us the rooms that no one has been in.

[00:17:41]

>> Bianca Gandolfo: Does that make sense? So, then we would say difference notInRooms. And that would give us our solution.
>> Speaker 8: How does it know to, it's kind of return memo. It's got that empty array.
>> Bianca Gandolfo: Mm-hm?
>> Speaker 8: How does it know to push memo into that where it's pushing?

[00:18:19]

>> Bianca Gandolfo: Yeah this push, is going to be pushed into this empty array. Cause this is the initial value, so for reduce you can pass nothing as the initial value and it will choose the first item in the array. Or you can give it your own initial value and you can define the behavior in the callback but a simpler version would really be to use just a filter, but filter is just type of reduce.

[00:19:06]

>> Bianca Gandolfo: Hum.
>> Speaker 9: So wouldn't difference give in this example, give billiard room this the difference
>> Bianca Gandolfo: Hum.
>> Speaker 9: So kitchen and ballroom would still be valid options as the no room.
>> Bianca Gandolfo: Good point. Maybe I did it backwards, hold on. Difference, yeah we don't want the difference we want the not difference.

[00:19:40]

>> Bianca Gandolfo: Creates an array of values not included.
>> Bianca Gandolfo: So close. So close.
>> Speaker 10: You'd want them room that not shows up the most but shows up exactly the same number of times as there are suspects, right?
>> Bianca Gandolfo: Yeah. Exactly. So we can maybe negate, we can negate difference, let's see create a function that negates the results of the predicate function.

[00:20:27]
So is even, filtering the gate is even overturned on. Yeah, maybe if we do a difference we negate it to make it more complicated, why not? All right but this is a function. So maybe
>> Speaker 10: We'd be negating a difference, right?
>> Bianca Gandolfo: Well,
>> Bianca Gandolfo: It has to be a predicate and I'll know that that will work.

[00:21:13]

>> Bianca Gandolfo: Maybe there's a deep unique.
>> Bianca Gandolfo: Unique,
>> Bianca Gandolfo: Let's see.
>> Bianca Gandolfo: No.
>> Bianca Gandolfo: Probably one of these ones.
>> Bianca Gandolfo: Three, one and three.
>> Bianca Gandolfo: I really want to use, I can do it logically, even the code, but I really wanna use a Lodash method.
>> Speaker 10: Certainly good array intersection or something.

[00:21:58]

>> Bianca Gandolfo: Yeah that's where I was looking, where is this?
>> Speaker 10: Yep. There's and underscore, or lowdash, intersection.
>> Bianca Gandolfo: Nice, let's do that. I knew there had to be something. There we go. And now we want, you want to return this.
>> Bianca Gandolfo: All right. What do you think? A little crazy?

[00:22:41]

>> Bianca Gandolfo: Any questions?
>> Bianca Gandolfo: Yeah, over the head. I mean, it's pretty much over my head, too.
>> Bianca Gandolfo: Okay.
>> Bianca Gandolfo: All right.
>> Bianca Gandolfo: Hmm.
>> Bianca Gandolfo: I'm thinking about this.
>> Bianca Gandolfo: So, we can also easily use a filter here
>> Bianca Gandolfo: to do the same thing as this reduce is doing.

[00:23:38]

>> Bianca Gandolfo: Cool.
>> Bianca Gandolfo: All right. Now you guys are like I never wanna use reduce again. That's what they say like people who criticize reduce say it's too complicated. The only thing that people can do with it is add numbers. But people who are really into it are really into it.

[00:24:09]
I like it just for the riddles like I said at the beginning of the class were really like riddles and mysteries and kind of like figuring stuff out. That's what I like about it. It kinda is like a riddle for me. How to use reduce

